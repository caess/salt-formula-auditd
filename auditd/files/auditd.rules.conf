{%- from "auditd/map.jinja" import rules with context %}
{%- set filtered_fs = [
'binfmt_misc', 'cgroup', 'configfs', 'debugfs',
'devpts', 'mqueue', 'nsfs', 'proc', 'pstore',
'securityfs', 'sysfs','tracefs'
]-%}

-D
{%- set bufsize = rules.get('options', {}).get('bufsize', 8192) %}
-b {{ bufsize }}

{%- set ruledict = rules.get('rules', {}) %}
{%- if ruledict|length > 0 %}
# Rules
{%- for rulegroup, options in ruledict.items() %}
# {{ rulegroup }} section
{%- if options.get('enabled', false) -%}
{%- for rule in options.get('rule_list', []) %}
{{ rule }} -k {{ rulegroup }}
{%- endfor %}
{%- endif %}
{%- endfor %}
{%- endif %}

{# Dynamically generated list of binaries which has sgid/suid bit #}
{# It can be extended via auditd.rules.rules.privileged.rule_list #}
{%- if pillar.auditd.rules.rules.privileged is defined -%}
{%-   if ruledict.privileged.get('enabled') -%}
{%-     for partition, options in salt['mount.active']().items() -%}
{%-         if ('noexec' not in options.opts) and
               ('nosuid' not in options.opts) and
               options.fstype not in filtered_fs -%}
{%-           set cmd = 'find '+ partition +' -xdev \( -perm -4000 -o -perm -2000 \) -type f' %}
{%-           set binaries = salt['cmd.shell'](cmd).splitlines() -%}
{%-           if binaries|length > 0 %}
# Dinamically generated privileged list for {{ partition }}
{%-           endif %}
{%-           for bin in binaries -%}
{%-             set rule = '-a always,exit -F path='+ bin +' -F perm=x -F auid>=1000 -F auid!=4294967295' -%}
{%-             if rule not in ruledict.get('privileged', {}).get('rule_list', []) %}
{{ rule + ' -k privileged' }}
{%-             endif %}
{%-           endfor -%}
{%-       endif -%}
{%-     endfor -%}
{%-   endif -%}
{%- endif %}

# Enabled
{%- set enabled = rules.get('options', {}).get('enabled', 0) %}
-e {{ enabled }}
