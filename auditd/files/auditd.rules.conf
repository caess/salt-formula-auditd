{%- from "auditd/map.jinja" import rules with context %}
{%- set filter_fs = rules.get('filter_fs', []) -%}
{%- set filter_paths = rules.get('filter_paths', []) -%}

-D
{%- set bufsize = rules.get('options', {}).get('bufsize', 8192) %}
-b {{ bufsize }}

{%- set ruledict = rules.get('rules', {}) %}
{%- if ruledict|length > 0 %}
# Rules
{%- for rulegroup, options in ruledict.items() %}
# {{ rulegroup }} section
{%- if options.get('enabled', false) -%}
{%- for rule in options.get('rule_list', []) %}
{{ rule }} -k {{ rulegroup }}
{%- endfor %}
{%- endif %}
{%- endfor %}
{%- endif %}

{# Dynamically generated list of binaries which have sgid/suid bit #}
{# It can be extended via the auditd.rules.rules.privileged.rule_list #}
{%- if pillar.auditd.rules.rules.privileged is defined -%}
{%-   if ruledict.privileged.get('enabled') -%}
{%-     set privileged_list = salt['auditd.find_privileged'](filter_fs=filter_fs,filter_paths=filter_paths) -%}
# Dinamically generated list of privileged files
{%-     for bin in privileged_list -%}
{%-         set rule = '-a always,exit -F path='+ bin +' -F perm=x -F auid>=1000 -F auid!=4294967295' -%}
{%-         if rule not in ruledict.get('privileged', {}).get('rule_list', []) %}
{{ rule + ' -k privileged' }}
{%-         endif %}
{%-     endfor -%}
{%-   endif -%}
{%- endif %}

# Enabled
{%- set enabled = rules.get('options', {}).get('enabled', 0) %}
-e {{ enabled }}
